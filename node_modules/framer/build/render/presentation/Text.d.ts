import * as React from "react";
import { Variants, Transition, MotionStyle } from "framer-motion";
import { Animatable } from "../../animation/Animatable/Animatable.js";
import { FontLoadStatus } from "../fonts/useFontLoadStatus.js";
import type { FilterProperties } from "../traits/Filters.js";
import { NewConstraintProperties, ParentSize } from "../types/NewConstraints.js";
import { RenderTarget } from "../types/RenderEnvironment.js";
import type { Shadow } from "../types/Shadow.js";
import { LayerProps } from "./Layer.js";
/**
 * @internal
 */
export declare type TextAlignment = "left" | "right" | "center" | undefined;
/**
 * @internal
 */
export declare type TextVerticalAlignment = "top" | "center" | "bottom";
/**
 * @internal
 */
export interface TextProps extends NewConstraintProperties, Partial<FilterProperties> {
    rotation: Animatable<number> | number;
    visible: boolean;
    name?: string;
    alignment: TextAlignment;
    verticalAlignment: TextVerticalAlignment;
    /**
     * @deprecated The single autoSize property will only be passed in when the
       supportsDomLayout platform check is NOT on, and will ultimately be
       removed
     */
    autoSize?: boolean;
    opacity?: number;
    shadows: Readonly<Shadow[]>;
    style?: MotionStyle;
    text?: string;
    font?: string;
    parentSize?: ParentSize;
}
/**
 * @internal
 */
export interface TextProperties extends TextProps, LayerProps {
    rawHTML?: string;
    isEditable?: boolean;
    fonts?: string[];
    fontLoadStatus: FontLoadStatus;
    layoutId?: string | undefined;
    className?: string;
    /** @internal */
    withExternalLayout?: boolean;
    /** @internal for testing */
    environment?(): RenderTarget;
    /** @internal */
    innerRef?: React.MutableRefObject<HTMLDivElement | null>;
    transition?: Transition;
    variants?: Variants;
    /** @internal */
    __fromCanvasComponent?: boolean;
    /** @internal */
    _initialStyle?: Partial<MotionStyle>;
    /** @internal */
    preload?: string[];
    /** @internal */
    __link?: string;
}
/**
 * @internal
 */
export declare const Text: React.ForwardRefExoticComponent<Partial<TextProperties> & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Text.d.ts.map