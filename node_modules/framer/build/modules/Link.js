import * as React from "react";
import { getPathForRoute, useCurrentRouteId, useRouter } from "../router/index.js";
import { parseFramerPageLink, PathVariablesContext } from "./framerPageLink.js";
import { preloadComponent } from "../router/index.js";
function isInternalURL(href) {
    if (href.startsWith("#") || href.startsWith("/"))
        return true;
    return false;
}
function isValidURL(href, isInternal) {
    try {
        const url = new URL(href);
        return Boolean(url.protocol); // in theory this should always be true, but just in case?
    }
    catch {
        // Ignore thrown errors.
    }
    return isInternal;
}
export function propsForLink(href) {
    const isInternal = isInternalURL(href);
    return {
        href: isValidURL(href, isInternal) ? href : `https://${href}`,
        target: isInternal ? undefined : "_blank",
        rel: !isInternal ? "noreferrer noopener" : undefined,
    };
}
/** @public */
export const Link = React.forwardRef(({ children, href, ...restProps }, forwardedRef) => {
    const router = useRouter();
    const currentRouteId = useCurrentRouteId();
    const pathVariables = React.useContext(PathVariablesContext);
    const props = React.useMemo(() => {
        const pageLink = parseFramerPageLink(href);
        if (!pageLink) {
            return propsForLink(href);
        }
        const currentRoute = currentRouteId ? router?.getRoute?.(currentRouteId) : undefined;
        if (pageLink.target) {
            const routeId = pageLink.target;
            const elementId = pageLink.element ?? undefined;
            const route = router?.getRoute?.(routeId, pathVariables);
            if (route)
                preloadComponent(route?.page);
            return {
                href: getPathForRoute(route, { currentRoutePath: currentRoute?.path, elementId }),
                onClick(event) {
                    event.preventDefault();
                    router?.navigate?.(routeId, elementId, pathVariables);
                },
            };
        }
        return {};
    }, [currentRouteId, href, pathVariables, router]);
    if (!children)
        return null;
    const child = React.Children.only(children);
    if (!React.isValidElement(child))
        return null;
    return React.cloneElement(child, { ...restProps, ...props, ref: forwardedRef });
});
//# sourceMappingURL=Link.js.map