{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bryange/Documents/Websites/bryange3.github.io/src/components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSpring, animated } from 'react-spring';\nimport CardInfo from '../components/CardInfo.js'; // Animation code derived from https://codesandbox.io/embed/rj998k4vmm\n\nconst calc = (x, y) => [-(y - window.innerHeight / 2) / 100, (x - window.innerWidth / 2) / 100, 1.05];\n\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\nlet screenLog = document.querySelector('#screen-log');\ndocument.addEventListener('mousemove', Card);\n\nfunction Card(props) {\n  _s();\n\n  const [springProps, set] = useSpring(() => ({\n    xys: [0, 0, 1],\n    config: {\n      mass: 5,\n      tension: 350,\n      friction: 50\n    }\n  }));\n  var element = document.getElementById(calc);\n  var clientRect = element.getBoundingClientRect();\n  var clientX = props.Client;\n  var clientY = clientRect.top;\n  return /*#__PURE__*/_jsxDEV(Link, {\n    className: \"d-inline-block project-card\",\n    to: props.item.path,\n    style: {\n      textDecoration: 'none',\n      color: 'black'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(animated.img, {\n        class: \"project-card-image\",\n        onMouseMove: ({\n          clientX: x,\n          clientY: y\n        }) => set({\n          xys: calc(x, y)\n        }),\n        onMouseLeave: () => set({\n          xys: [0, 0, 1]\n        }),\n        style: {\n          transform: springProps.xys.interpolate(trans)\n        },\n        src: props.item.imgSrc,\n        alt: props.item.imgSrc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardInfo, {\n      title: props.item.name,\n      subTitle: props.item.description,\n      roles: props.item.roles,\n      path: props.item.path\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Card, \"+xqLWFff2oiU7fi4EfSpyrWtUFo=\", false, function () {\n  return [useSpring];\n});\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/bryange/Documents/Websites/bryange3.github.io/src/components/Card.js"],"names":["React","Link","useSpring","animated","CardInfo","calc","x","y","window","innerHeight","innerWidth","trans","s","screenLog","document","querySelector","addEventListener","Card","props","springProps","set","xys","config","mass","tension","friction","element","getElementById","clientRect","getBoundingClientRect","clientX","Client","clientY","top","item","path","textDecoration","color","transform","interpolate","imgSrc","name","description","roles"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSpring, animated } from 'react-spring'\n\nimport CardInfo from '../components/CardInfo.js';\n\n// Animation code derived from https://codesandbox.io/embed/rj998k4vmm\nconst calc = (x, y) => [-(y - window.innerHeight / 2) / 100, (x - window.innerWidth / 2) / 100, 1.05]\nconst trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`\n\nlet screenLog = document.querySelector('#screen-log');\ndocument.addEventListener('mousemove', Card);\n\nfunction Card(props) {\n\n    const [springProps, set] = useSpring(() => ({ xys: [0, 0, 1], config: { mass: 5, tension: 350, friction: 50 } }));\n\n    var element = document.getElementById(calc);\n    var clientRect = element.getBoundingClientRect();\n    var clientX = props.Client\n    var clientY = clientRect.top;\n    \n    return (\n        <Link className=\"d-inline-block project-card\" to={props.item.path} style={{ textDecoration: 'none', color: 'black'}}>\n            <div>\n                <animated.img\n                    class=\"project-card-image\"\n                    onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n                    onMouseLeave={() => set({ xys: [0, 0, 1] })}\n                    style={{ transform: springProps.xys.interpolate(trans) }}\n                    src={props.item.imgSrc}\n                    alt={props.item.imgSrc}\n                />\n            </div>\n            <CardInfo title={props.item.name} subTitle={props.item.description} roles={props.item.roles} path={props.item.path} />\n        </Link>\n    );\n}\n\nexport default Card;"]},"metadata":{},"sourceType":"module"}