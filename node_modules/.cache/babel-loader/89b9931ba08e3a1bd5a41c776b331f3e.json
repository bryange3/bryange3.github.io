{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.listen = listen;\nexports.unlisten = unlisten;\n////////////////////////////////////////////////////////////////////////////////////////\n// Small helpers that provide an easy and efficient way to add/remove event listeners //\n////////////////////////////////////////////////////////////////////////////////////////\nvar elementsWithListeners = [];\nvar registeredListeners = [];\nfunction createListener(el) {\n  return {\n    el: el,\n    callbacks: {},\n    realCallbacks: {},\n    realListenersCnt: 0\n  };\n}\nfunction addCallback(listener, event, cb) {\n  if (listener.callbacks[event]) {\n    if (listener.callbacks[event].indexOf(cb) === -1) {\n      listener.callbacks[event].push(cb);\n    }\n    return;\n  }\n  listener.callbacks[event] = [cb];\n  listener.realCallbacks[event] = function (e) {\n    for (var i = 0, l = listener.callbacks[event].length; i < l; i += 1) {\n      listener.callbacks[event][i](e);\n    }\n  };\n  listener.el.addEventListener(event, listener.realCallbacks[event]);\n  listener.realListenersCnt += 1;\n}\nfunction removeCallback(listener, event, cb) {\n  if (!listener.callbacks[event]) {\n    return;\n  }\n  var idx = listener.callbacks[event].indexOf(cb);\n  if (idx === -1) {\n    return;\n  }\n  listener.callbacks[event].splice(idx, 1);\n  if (listener.callbacks[event].length > 0) {\n    return;\n  } // no more listeners, lets clean up\n\n  listener.el.removeEventListener(event, listener.realCallbacks[event]);\n  delete listener.callbacks[event];\n  delete listener.realCallbacks[event];\n  listener.realListenersCnt -= 1;\n}\nfunction addListener(el, event, cb) {\n  var idx = elementsWithListeners.indexOf(el);\n  if (idx === -1) {\n    idx = elementsWithListeners.length;\n    elementsWithListeners.push(el);\n    registeredListeners.push(createListener(el));\n  }\n  var listener = registeredListeners[idx];\n  addCallback(listener, event, cb);\n}\nfunction removeListener(el, event, cb) {\n  var idx = elementsWithListeners.indexOf(el);\n  if (idx === -1) {\n    return;\n  }\n  var listener = registeredListeners[idx];\n  removeCallback(listener, event, cb);\n  if (listener.realListenersCnt > 0) {\n    return;\n  } // no more listeners lets clean up\n\n  elementsWithListeners.splice(idx, 1);\n  registeredListeners.splice(idx, 1);\n}\n/**\n * Subscribe cb to events list\n * @param  {HTMLElement}   el       target element\n * @param  {Array}         events   array of event names\n * @param  {Function} cb   callback that should be called\n */\n\nfunction listen(el, events, cb) {\n  for (var i = 0, l = events.length; i < l; i += 1) {\n    addListener(el, events[i], cb);\n  }\n}\n/**\n * Unsubscribe cb from events list\n * @param  {HTMLElement}   el       target element\n * @param  {Array}         events   array of event names\n * @param  {Function} cb   callback that should be unsubscribed\n */\n\nfunction unlisten(el, events, cb) {\n  for (var i = 0, l = events.length; i < l; i += 1) {\n    removeListener(el, events[i], cb);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}