{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar _events = require(\"./helpers/events\");\n\nvar _find = _interopRequireDefault(require(\"./helpers/find\"));\n\nvar _getClosestTransformedParent = _interopRequireDefault(require(\"./helpers/getClosestTransformedParent\"));\n\nvar _rect = require(\"./helpers/rect\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar buildTopStyles = function buildTopStyles(container, props) {\n  var bottomOffset = props.bottomOffset,\n      hideOnBoundaryHit = props.hideOnBoundaryHit;\n  var top = container.top,\n      height = container.height,\n      width = container.width,\n      boundaryBottom = container.boundaryBottom; // above boundary\n\n  if (hideOnBoundaryHit || top + height + bottomOffset < boundaryBottom) {\n    return {\n      top: top + \"px\",\n      width: width + \"px\",\n      position: 'fixed'\n    };\n  } // reaching boundary\n\n\n  if (!hideOnBoundaryHit && boundaryBottom > 0) {\n    return {\n      top: boundaryBottom - height - bottomOffset + \"px\",\n      width: width + \"px\",\n      position: 'fixed'\n    };\n  } // below boundary\n\n\n  return {\n    width: width + \"px\",\n    bottom: bottomOffset + \"px\",\n    position: 'absolute'\n  };\n};\n\nvar buildBottomStyles = function buildBottomStyles(container, props) {\n  var bottomOffset = props.bottomOffset,\n      hideOnBoundaryHit = props.hideOnBoundaryHit;\n  var bottom = container.bottom,\n      height = container.height,\n      width = container.width,\n      boundaryTop = container.boundaryTop;\n\n  if (hideOnBoundaryHit || bottom - height - bottomOffset > boundaryTop) {\n    return {\n      width: width + \"px\",\n      top: bottom - height + \"px\",\n      position: 'fixed'\n    };\n  }\n\n  return {\n    width: width + \"px\",\n    top: bottomOffset + \"px\",\n    position: 'absolute'\n  };\n};\n\nvar buildStickyStyle = function buildStickyStyle(mode, props, container) {\n  return (mode === 'top' ? buildTopStyles : buildBottomStyles)(container, props);\n};\n\nvar isEqual = function isEqual(obj1, obj2) {\n  var styles1 = obj1.wrapperStyles;\n  var styles2 = obj2.wrapperStyles;\n\n  if (obj1.isFixed !== obj2.isFixed || obj1.height !== obj2.height || !styles1 && styles2 || styles1 && !styles2) {\n    return false;\n  }\n\n  if (!styles2) {\n    // we need this condition to make Flow happy\n    return true;\n  }\n\n  for (var field in styles1) {\n    if (styles1.hasOwnProperty(field) && styles1[field] !== styles2[field]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar Sticky = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Sticky, _Component);\n\n  function Sticky() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.holderEl = null;\n    _this.wrapperEl = null;\n    _this.el = null;\n    _this.scrollEl = null;\n    _this.boundaryEl = null;\n    _this.disabled = false;\n    _this.checkPositionIntervalId = void 0;\n    _this.lastMinHeight = void 0;\n    _this.state = {\n      isFixed: false,\n      wrapperStyles: null,\n      holderStyles: null,\n      height: 0\n    };\n\n    _this.holderRef = function (holderEl) {\n      if (holderEl === _this.holderEl) {\n        return;\n      }\n\n      _this.holderEl = holderEl;\n    };\n\n    _this.wrapperRef = function (wrapperEl) {\n      if (wrapperEl === _this.wrapperEl) {\n        return;\n      }\n\n      _this.wrapperEl = wrapperEl;\n\n      _this.updateScrollEl();\n\n      _this.updateBoundaryEl();\n    };\n\n    _this.checkPosition = function () {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          holderEl = _assertThisInitialize.holderEl,\n          wrapperEl = _assertThisInitialize.wrapperEl,\n          boundaryEl = _assertThisInitialize.boundaryEl,\n          scrollEl = _assertThisInitialize.scrollEl,\n          disabled = _assertThisInitialize.disabled;\n\n      if (!scrollEl || !holderEl || !wrapperEl) {\n        console.error(\"Missing required elements:\", {\n          scrollEl: scrollEl,\n          holderEl: holderEl,\n          wrapperEl: wrapperEl\n        });\n        return;\n      }\n\n      var _this$props = _this.props,\n          mode = _this$props.mode,\n          onFixedToggle = _this$props.onFixedToggle,\n          offsetTransforms = _this$props.offsetTransforms,\n          isIOSFixEnabled = _this$props.isIOSFixEnabled,\n          dontUpdateHolderHeightWhenSticky = _this$props.dontUpdateHolderHeightWhenSticky;\n\n      if (disabled) {\n        if (_this.state.isFixed) {\n          _this.setState({\n            isFixed: false,\n            wrapperStyles: {}\n          });\n        }\n\n        return;\n      }\n\n      if (!holderEl.getBoundingClientRect || !wrapperEl.getBoundingClientRect) {\n        return;\n      }\n\n      var holderRect = holderEl.getBoundingClientRect();\n      var wrapperRect = wrapperEl.getBoundingClientRect();\n      var boundaryRect = boundaryEl ? (0, _rect.getRect)(boundaryEl) : _rect.infiniteRect;\n      var scrollRect = (0, _rect.getRect)(scrollEl);\n\n      var isFixed = _this.isFixed(holderRect, wrapperRect, boundaryRect, scrollRect);\n\n      var offsets = null;\n\n      if (offsetTransforms && isFixed) {\n        var closestTransformedParent = (0, _getClosestTransformedParent.default)(scrollEl);\n\n        if (closestTransformedParent) {\n          offsets = (0, _rect.getRect)(closestTransformedParent);\n        }\n      }\n\n      var minHeight = _this.state.isFixed && dontUpdateHolderHeightWhenSticky && _this.lastMinHeight ? _this.lastMinHeight : wrapperRect.height;\n      _this.lastMinHeight = minHeight; // To ensure that this component becomes sticky immediately on mobile devices instead\n      // of disappearing until the scroll event completes, we add `transform: translateZ(0)`\n      // to 'kick' rendering of this element to the GPU\n      // @see http://stackoverflow.com/questions/32875046\n\n      var iosRenderingFixStyles = isIOSFixEnabled ? {\n        transform: 'translateZ(0)',\n        WebkitTransform: 'translateZ(0)'\n      } : null;\n      var newState = {\n        isFixed: isFixed,\n        height: wrapperRect.height,\n        holderStyles: {\n          minHeight: minHeight + \"px\"\n        },\n        wrapperStyles: isFixed ? _extends({}, iosRenderingFixStyles, buildStickyStyle(mode, _this.props, {\n          boundaryTop: mode === 'bottom' ? boundaryRect.top : 0,\n          boundaryBottom: mode === 'top' ? boundaryRect.bottom : 0,\n          top: mode === 'top' ? scrollRect.top - (offsets ? offsets.top : 0) : 0,\n          bottom: mode === 'bottom' ? scrollRect.bottom - (offsets ? offsets.bottom : 0) : 0,\n          width: holderRect.width,\n          height: wrapperRect.height\n        })) : iosRenderingFixStyles\n      };\n\n      if (isFixed !== _this.state.isFixed && onFixedToggle && typeof onFixedToggle === 'function') {\n        onFixedToggle(isFixed);\n      }\n\n      if (!isEqual(_this.state, newState)) {\n        _this.setState(newState);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Sticky.prototype;\n\n  _proto.isFixed = function isFixed(holderRect, wrapperRect, boundaryRect, scrollRect) {\n    var _this$props2 = this.props,\n        hideOnBoundaryHit = _this$props2.hideOnBoundaryHit,\n        bottomOffset = _this$props2.bottomOffset,\n        topOffset = _this$props2.topOffset,\n        mode = _this$props2.mode;\n\n    if (this.disabled) {\n      return false;\n    }\n\n    if (hideOnBoundaryHit && boundaryRect && !(0, _rect.isIntersecting)(boundaryRect, scrollRect, topOffset, bottomOffset)) {\n      return false;\n    }\n\n    var hideOffset = hideOnBoundaryHit ? wrapperRect.height + bottomOffset : 0;\n\n    if (mode === 'top') {\n      return holderRect.top + topOffset < scrollRect.top && scrollRect.top + hideOffset <= boundaryRect.bottom;\n    }\n\n    return holderRect.bottom - topOffset > scrollRect.bottom && scrollRect.bottom - hideOffset >= boundaryRect.top;\n  };\n\n  _proto.updateScrollEl = function updateScrollEl() {\n    if (!this.wrapperEl) {\n      return;\n    }\n\n    if (this.scrollEl) {\n      (0, _events.unlisten)(this.scrollEl, ['scroll'], this.checkPosition);\n      this.scrollEl = null;\n    }\n\n    var scrollElement = this.props.scrollElement;\n\n    if (typeof scrollElement === 'string') {\n      this.scrollEl = (0, _find.default)(scrollElement, this.wrapperEl);\n    } else {\n      this.scrollEl = scrollElement;\n    }\n\n    if (this.scrollEl) {\n      (0, _events.listen)(this.scrollEl, ['scroll'], this.checkPosition);\n    } else {\n      console.error('Cannot find scrollElement ' + (typeof scrollElement === 'string' ? scrollElement : 'unknown'));\n    }\n  };\n\n  _proto.updateBoundaryEl = function updateBoundaryEl() {\n    if (!this.wrapperEl) {\n      return;\n    }\n\n    var boundaryElement = this.props.boundaryElement;\n    this.boundaryEl = (0, _find.default)(boundaryElement, this.wrapperEl);\n\n    if (this.boundaryEl === window || this.boundaryEl === document) {\n      // such objects can't be used as boundary\n      // and in fact there is no point in such a case\n      this.boundaryEl = null;\n    }\n  };\n\n  _proto.initialize = function initialize() {\n    var _this$props3 = this.props,\n        positionRecheckInterval = _this$props3.positionRecheckInterval,\n        disabled = _this$props3.disabled;\n    this.disabled = disabled; // we should always listen to window events because they will affect the layout of the whole page\n\n    (0, _events.listen)(window, ['scroll', 'resize', 'pageshow', 'load'], this.checkPosition);\n    this.checkPosition();\n\n    if (positionRecheckInterval) {\n      this.checkPositionIntervalId = setInterval(this.checkPosition, positionRecheckInterval);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(_ref) {\n    var scrollElement = _ref.scrollElement,\n        boundaryElement = _ref.boundaryElement,\n        disabled = _ref.disabled;\n\n    if (scrollElement !== this.props.scrollElement) {\n      this.updateScrollEl();\n    }\n\n    if (boundaryElement !== this.props.boundaryElement) {\n      this.updateBoundaryEl();\n    }\n\n    if (disabled !== this.props.disabled) {\n      this.disabled = this.props.disabled;\n      this.checkPosition();\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.initialize();\n\n    if (this.wrapperEl === null) {\n      console.error(\"Wrapper element is missing, please make sure that you have assigned refs correctly\");\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.scrollEl) {\n      (0, _events.unlisten)(this.scrollEl, ['scroll'], this.checkPosition);\n    }\n\n    (0, _events.unlisten)(window, ['scroll', 'resize', 'pageshow', 'load'], this.checkPosition);\n    this.boundaryEl = null;\n    this.scrollEl = null;\n    clearInterval(this.checkPositionIntervalId);\n  };\n\n  _proto.render = function render() {\n    var holderRef = this.holderRef,\n        wrapperRef = this.wrapperRef;\n    var _this$state = this.state,\n        isFixed = _this$state.isFixed,\n        wrapperStyles = _this$state.wrapperStyles,\n        holderStyles = _this$state.holderStyles;\n    return this.props.children({\n      holderRef: holderRef,\n      wrapperRef: wrapperRef,\n      isFixed: isFixed,\n      wrapperStyles: wrapperStyles,\n      holderStyles: holderStyles\n    });\n  };\n\n  return Sticky;\n}(_react.Component);\n\nSticky.defaultProps = {\n  mode: 'top',\n  topOffset: 0,\n  bottomOffset: 0,\n  isIOSFixEnabled: true,\n  disabled: false,\n  onFixedToggle: null,\n  boundaryElement: null,\n  scrollElement: 'window',\n  dontUpdateHolderHeightWhenSticky: false\n};\nvar _default = Sticky;\nexports.default = _default;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}